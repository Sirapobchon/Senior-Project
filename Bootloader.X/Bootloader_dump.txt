
dist\default\production\Bootloader.X.production.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000251  00007000  00007000  00000074  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  1 .trampolines  00000000  00007000  00007000  00000074  2**1
                  ALLOC, LOAD, READONLY, CODE
  2 .debug_abbrev 000008b0  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000015ad  00000000  00000000  00000b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_line   00000944  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_str    00000242  00000000  00000000  00002a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 progmem.data.__c.2443 00000012  00007251  00007251  000002c5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEM
  8 .debug_loc    00000785  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000e8  00000000  00000000  00003488  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000005b  00000000  00000000  00003620  2**0
                  CONTENTS, READONLY
 12 .stack.descriptors.hdr 0000002a  00000000  00000000  0000367b  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00000250  00000000  00000000  000036a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .dinit        00000000  00007000  00007000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEM

Disassembly of section .text:

00007000 <_start>:
        uart_transmit_string(PSTR("Unknown command\n"));
    }

    // Final cleanup
    while (UCSR0A & (1 << RXC0)) (void)UDR0;
}
    7000:	f8 94       	cli
    7002:	14 be       	out	0x34, r1	; 52
    7004:	a8 95       	wdr
    7006:	0f b6       	in	r0, 0x3f	; 63
    7008:	f8 94       	cli
    700a:	a8 95       	wdr
    700c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7010:	88 61       	ori	r24, 0x18	; 24
    7012:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7016:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    701a:	0f be       	out	0x3f, r0	; 63
    701c:	cf ef       	ldi	r28, 0xFF	; 255
    701e:	d8 e0       	ldi	r29, 0x08	; 8
    7020:	cd bf       	out	0x3d, r28	; 61
    7022:	de bf       	out	0x3e, r29	; 62
    7024:	51 9a       	sbi	0x0a, 1	; 10
    7026:	59 9a       	sbi	0x0b, 1	; 11
    7028:	0e 94 28 38 	call	0x7050	; 0x7050 <uart_init>
    702c:	8f e2       	ldi	r24, 0x2F	; 47
    702e:	92 e7       	ldi	r25, 0x72	; 114
    7030:	0e 94 48 38 	call	0x7090	; 0x7090 <uart_transmit_string>
    7034:	80 e0       	ldi	r24, 0x00	; 0
    7036:	90 e0       	ldi	r25, 0x00	; 0
    7038:	dc 01       	movw	r26, r24
    703a:	01 96       	adiw	r24, 0x01	; 1
    703c:	a1 1d       	adc	r26, r1
    703e:	b1 1d       	adc	r27, r1
    7040:	80 35       	cpi	r24, 0x50	; 80
    7042:	23 ec       	ldi	r18, 0xC3	; 195
    7044:	92 07       	cpc	r25, r18
    7046:	a1 05       	cpc	r26, r1
    7048:	b1 05       	cpc	r27, r1
    704a:	b8 f3       	brcs	.-18     	; 0x703a <_start+0x3a>
    704c:	0c 94 9b 38 	jmp	0x7136	; 0x7136 <main>

00007050 <uart_init>:
    7050:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    7054:	83 e3       	ldi	r24, 0x33	; 51
    7056:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    705a:	88 e1       	ldi	r24, 0x18	; 24
    705c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    7060:	86 e0       	ldi	r24, 0x06	; 6
    7062:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    7066:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    706a:	88 23       	and	r24, r24
    706c:	44 f4       	brge	.+16     	; 0x707e <uart_init+0x2e>
    706e:	a6 ec       	ldi	r26, 0xC6	; 198
    7070:	b0 e0       	ldi	r27, 0x00	; 0
    7072:	e0 ec       	ldi	r30, 0xC0	; 192
    7074:	f0 e0       	ldi	r31, 0x00	; 0
    7076:	8c 91       	ld	r24, X
    7078:	80 81       	ld	r24, Z
    707a:	88 23       	and	r24, r24
    707c:	e4 f3       	brlt	.-8      	; 0x7076 <uart_init+0x26>
    707e:	08 95       	ret

00007080 <uart_transmit>:
    7080:	e0 ec       	ldi	r30, 0xC0	; 192
    7082:	f0 e0       	ldi	r31, 0x00	; 0
    7084:	90 81       	ld	r25, Z
    7086:	95 ff       	sbrs	r25, 5
    7088:	fd cf       	rjmp	.-6      	; 0x7084 <uart_transmit+0x4>
    708a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    708e:	08 95       	ret

00007090 <uart_transmit_string>:
    7090:	cf 93       	push	r28
    7092:	df 93       	push	r29
    7094:	ec 01       	movw	r28, r24
    7096:	21 96       	adiw	r28, 0x01	; 1
    7098:	fc 01       	movw	r30, r24
    709a:	84 91       	lpm	r24, Z
    709c:	88 23       	and	r24, r24
    709e:	39 f0       	breq	.+14     	; 0x70ae <uart_transmit_string+0x1e>
    70a0:	0e 94 40 38 	call	0x7080	; 0x7080 <uart_transmit>
    70a4:	fe 01       	movw	r30, r28
    70a6:	84 91       	lpm	r24, Z
    70a8:	21 96       	adiw	r28, 0x01	; 1
    70aa:	81 11       	cpse	r24, r1
    70ac:	f9 cf       	rjmp	.-14     	; 0x70a0 <uart_transmit_string+0x10>
    70ae:	df 91       	pop	r29
    70b0:	cf 91       	pop	r28
    70b2:	08 95       	ret

000070b4 <uart_transmit_string_R>:
    70b4:	cf 93       	push	r28
    70b6:	df 93       	push	r29
    70b8:	ec 01       	movw	r28, r24
    70ba:	88 81       	ld	r24, Y
    70bc:	88 23       	and	r24, r24
    70be:	31 f0       	breq	.+12     	; 0x70cc <uart_transmit_string_R+0x18>
    70c0:	21 96       	adiw	r28, 0x01	; 1
    70c2:	0e 94 40 38 	call	0x7080	; 0x7080 <uart_transmit>
    70c6:	89 91       	ld	r24, Y+
    70c8:	81 11       	cpse	r24, r1
    70ca:	fb cf       	rjmp	.-10     	; 0x70c2 <uart_transmit_string_R+0xe>
    70cc:	df 91       	pop	r29
    70ce:	cf 91       	pop	r28
    70d0:	08 95       	ret

000070d2 <uart_transmit_hex>:
    70d2:	cf 93       	push	r28
    70d4:	df 93       	push	r29
    70d6:	00 d0       	rcall	.+0      	; 0x70d8 <uart_transmit_hex+0x6>
    70d8:	0f 92       	push	r0
    70da:	cd b7       	in	r28, 0x3d	; 61
    70dc:	de b7       	in	r29, 0x3e	; 62
    70de:	e8 2f       	mov	r30, r24
    70e0:	e2 95       	swap	r30
    70e2:	ef 70       	andi	r30, 0x0F	; 15
    70e4:	f0 e0       	ldi	r31, 0x00	; 0
    70e6:	e6 51       	subi	r30, 0x16	; 22
    70e8:	fe 48       	sbci	r31, 0x8E	; 142
    70ea:	90 81       	ld	r25, Z
    70ec:	99 83       	std	Y+1, r25	; 0x01
    70ee:	8f 70       	andi	r24, 0x0F	; 15
    70f0:	e8 2f       	mov	r30, r24
    70f2:	f0 e0       	ldi	r31, 0x00	; 0
    70f4:	e6 51       	subi	r30, 0x16	; 22
    70f6:	fe 48       	sbci	r31, 0x8E	; 142
    70f8:	80 81       	ld	r24, Z
    70fa:	8a 83       	std	Y+2, r24	; 0x02
    70fc:	1b 82       	std	Y+3, r1	; 0x03
    70fe:	ce 01       	movw	r24, r28
    7100:	01 96       	adiw	r24, 0x01	; 1
    7102:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <uart_transmit_string_R>
    7106:	0f 90       	pop	r0
    7108:	0f 90       	pop	r0
    710a:	0f 90       	pop	r0
    710c:	df 91       	pop	r29
    710e:	cf 91       	pop	r28
    7110:	08 95       	ret

00007112 <tempread_packet>:

// Dummy read_packet
void tempread_packet() {
    uart_transmit_string("<WAITING COMMAND>\n");
    7112:	8c e1       	ldi	r24, 0x1C	; 28
    7114:	92 e7       	ldi	r25, 0x72	; 114
    7116:	0e 94 48 38 	call	0x7090	; 0x7090 <uart_transmit_string>
    711a:	ff cf       	rjmp	.-2      	; 0x711a <tempread_packet+0x8>

0000711c <clear_bss>:
}

void clear_bss() {
    extern uint8_t __bss_start;
    extern uint8_t __bss_end;
    for (uint8_t* ptr = &__bss_start; ptr < &__bss_end; ++ptr) {
    711c:	80 e0       	ldi	r24, 0x00	; 0
    711e:	91 e0       	ldi	r25, 0x01	; 1
    7120:	21 e0       	ldi	r18, 0x01	; 1
    7122:	80 30       	cpi	r24, 0x00	; 0
    7124:	92 07       	cpc	r25, r18
    7126:	30 f4       	brcc	.+12     	; 0x7134 <clear_bss+0x18>
    7128:	fc 01       	movw	r30, r24
        *ptr = 0;
    712a:	11 92       	st	Z+, r1
}

void clear_bss() {
    extern uint8_t __bss_start;
    extern uint8_t __bss_end;
    for (uint8_t* ptr = &__bss_start; ptr < &__bss_end; ++ptr) {
    712c:	81 e0       	ldi	r24, 0x01	; 1
    712e:	e0 30       	cpi	r30, 0x00	; 0
    7130:	f8 07       	cpc	r31, r24
    7132:	d9 f7       	brne	.-10     	; 0x712a <clear_bss+0xe>
    7134:	08 95       	ret

00007136 <main>:
}

int main(void) {

    uint16_t sp;
    asm volatile("in %A0, __SP_L__ \n\t"
    7136:	cd b7       	in	r28, 0x3d	; 61
    7138:	de b7       	in	r29, 0x3e	; 62
                 "in %B0, __SP_H__"
                 : "=r" (sp));
    uart_transmit_string("SP: ");
    713a:	8f e3       	ldi	r24, 0x3F	; 63
    713c:	92 e7       	ldi	r25, 0x72	; 114
    713e:	0e 94 48 38 	call	0x7090	; 0x7090 <uart_transmit_string>
    uart_transmit_hex(sp >> 8);
    7142:	8d 2f       	mov	r24, r29
    7144:	0e 94 69 38 	call	0x70d2	; 0x70d2 <uart_transmit_hex>
    uart_transmit_hex(sp & 0xFF);
    7148:	8c 2f       	mov	r24, r28
    714a:	0e 94 69 38 	call	0x70d2	; 0x70d2 <uart_transmit_hex>
    uart_transmit('\n');
    714e:	8a e0       	ldi	r24, 0x0A	; 10
    7150:	0e 94 40 38 	call	0x7080	; 0x7080 <uart_transmit>

    clear_bss(); // Test 4: Manually zero .bss
    7154:	0e 94 8e 38 	call	0x711c	; 0x711c <clear_bss>

    // Test 1: Increment cold boot counter
    uint8_t boot_count = eeprom_read_byte((uint8_t*)EEPROM_BOOT_COUNTER_ADDR);
    7158:	80 e1       	ldi	r24, 0x10	; 16
    715a:	90 e0       	ldi	r25, 0x00	; 0
    715c:	0e 94 db 38 	call	0x71b6	; 0x71b6 <eeprom_read_byte>
    7160:	c8 2f       	mov	r28, r24
    eeprom_update_byte((uint8_t*)EEPROM_BOOT_COUNTER_ADDR, boot_count + 1);
    7162:	61 e0       	ldi	r22, 0x01	; 1
    7164:	68 0f       	add	r22, r24
    7166:	80 e1       	ldi	r24, 0x10	; 16
    7168:	90 e0       	ldi	r25, 0x00	; 0
    716a:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <eeprom_update_byte>
    /*currentFlashAddress = read_flash_ptr_from_eeprom();
    if (currentFlashAddress < FLASH_TASK_START || currentFlashAddress >= FLASH_TASK_LIMIT) {
        currentFlashAddress = FLASH_TASK_START;
    }*/
    
    uart_transmit_string("Boot count: ");
    716e:	84 e4       	ldi	r24, 0x44	; 68
    7170:	92 e7       	ldi	r25, 0x72	; 114
    7172:	0e 94 48 38 	call	0x7090	; 0x7090 <uart_transmit_string>
    uart_transmit_hex(boot_count);
    7176:	8c 2f       	mov	r24, r28
    7178:	0e 94 69 38 	call	0x70d2	; 0x70d2 <uart_transmit_hex>
    uart_transmit('\n');
    717c:	8a e0       	ldi	r24, 0x0A	; 10
    717e:	0e 94 40 38 	call	0x7080	; 0x7080 <uart_transmit>
    
    DDRB |= (1 << PB2);// Arduino UNO LED pin
    7182:	22 9a       	sbi	0x04, 2	; 4
    7184:	25 e0       	ldi	r18, 0x05	; 5
    7186:	30 e0       	ldi	r19, 0x00	; 0
    for (int i = 0; i < 5; i++) {
        PORTB ^= (1 << PB2);
    7188:	94 e0       	ldi	r25, 0x04	; 4
    718a:	85 b1       	in	r24, 0x05	; 5
    718c:	89 27       	eor	r24, r25
    718e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7190:	4f ef       	ldi	r20, 0xFF	; 255
    7192:	51 ee       	ldi	r21, 0xE1	; 225
    7194:	84 e0       	ldi	r24, 0x04	; 4
    7196:	41 50       	subi	r20, 0x01	; 1
    7198:	50 40       	sbci	r21, 0x00	; 0
    719a:	80 40       	sbci	r24, 0x00	; 0
    719c:	e1 f7       	brne	.-8      	; 0x7196 <main+0x60>
    719e:	00 c0       	rjmp	.+0      	; 0x71a0 <main+0x6a>
    71a0:	00 00       	nop
    71a2:	21 50       	subi	r18, 0x01	; 1
    71a4:	31 09       	sbc	r19, r1
    uart_transmit_string("Boot count: ");
    uart_transmit_hex(boot_count);
    uart_transmit('\n');
    
    DDRB |= (1 << PB2);// Arduino UNO LED pin
    for (int i = 0; i < 5; i++) {
    71a6:	89 f7       	brne	.-30     	; 0x718a <main+0x54>
        PORTB ^= (1 << PB2);
        _delay_ms(200);
    }
    
    uart_transmit_string(PSTR("Bootloader Ready\n"));
    71a8:	81 e5       	ldi	r24, 0x51	; 81
    71aa:	92 e7       	ldi	r25, 0x72	; 114
    71ac:	0e 94 48 38 	call	0x7090	; 0x7090 <uart_transmit_string>
    
    while (1) {
        tempread_packet(); 
    71b0:	0e 94 89 38 	call	0x7112	; 0x7112 <tempread_packet>

000071b4 <_fini>:
    71b4:	08 95       	ret

000071b6 <eeprom_read_byte>:
    71b6:	f9 99       	sbic	0x1f, 1	; 31
    71b8:	fe cf       	rjmp	.-4      	; 0x71b6 <eeprom_read_byte>
    71ba:	92 bd       	out	0x22, r25	; 34
    71bc:	81 bd       	out	0x21, r24	; 33
    71be:	f8 9a       	sbi	0x1f, 0	; 31
    71c0:	99 27       	eor	r25, r25
    71c2:	80 b5       	in	r24, 0x20	; 32
    71c4:	08 95       	ret

000071c6 <eeprom_update_byte>:
    71c6:	26 2f       	mov	r18, r22

000071c8 <eeprom_update_r18>:
    71c8:	f9 99       	sbic	0x1f, 1	; 31
    71ca:	fe cf       	rjmp	.-4      	; 0x71c8 <eeprom_update_r18>
    71cc:	92 bd       	out	0x22, r25	; 34
    71ce:	81 bd       	out	0x21, r24	; 33
    71d0:	f8 9a       	sbi	0x1f, 0	; 31
    71d2:	01 97       	sbiw	r24, 0x01	; 1
    71d4:	00 b4       	in	r0, 0x20	; 32
    71d6:	02 16       	cp	r0, r18
    71d8:	39 f0       	breq	.+14     	; 0x71e8 <eeprom_update_r18+0x20>
    71da:	1f ba       	out	0x1f, r1	; 31
    71dc:	20 bd       	out	0x20, r18	; 32
    71de:	0f b6       	in	r0, 0x3f	; 63
    71e0:	f8 94       	cli
    71e2:	fa 9a       	sbi	0x1f, 2	; 31
    71e4:	f9 9a       	sbi	0x1f, 1	; 31
    71e6:	0f be       	out	0x3f, r0	; 63
    71e8:	08 95       	ret
    71ea:	30 31       	cpi	r19, 0x10	; 16
    71ec:	32 33       	cpi	r19, 0x32	; 50
    71ee:	34 35       	cpi	r19, 0x54	; 84
    71f0:	36 37       	cpi	r19, 0x76	; 118
    71f2:	38 39       	cpi	r19, 0x98	; 152
    71f4:	41 42       	sbci	r20, 0x21	; 33
    71f6:	43 44       	sbci	r20, 0x43	; 67
    71f8:	45 46       	sbci	r20, 0x65	; 101
    71fa:	00 3c       	cpi	r16, 0xC0	; 192
    71fc:	41 44       	sbci	r20, 0x41	; 65
    71fe:	44 52       	subi	r20, 0x24	; 36
    7200:	3a 00       	.word	0x003a	; ????
    7202:	4a 75       	andi	r20, 0x5A	; 90
    7204:	6d 70       	andi	r22, 0x0D	; 13
    7206:	69 6e       	ori	r22, 0xE9	; 233
    7208:	67 20       	and	r6, r7
    720a:	74 6f       	ori	r23, 0xF4	; 244
    720c:	20 52       	subi	r18, 0x20	; 32
    720e:	54 4f       	sbci	r21, 0xF4	; 244
    7210:	53 2e       	mov	r5, r19
    7212:	2e 2e       	mov	r2, r30
    7214:	0a 00       	.word	0x000a	; ????
    7216:	54 41       	sbci	r21, 0x14	; 20
    7218:	53 4b       	sbci	r21, 0xB3	; 179
    721a:	3a 00       	.word	0x003a	; ????
    721c:	3c 57       	subi	r19, 0x7C	; 124
    721e:	41 49       	sbci	r20, 0x91	; 145
    7220:	54 49       	sbci	r21, 0x94	; 148
    7222:	4e 47       	sbci	r20, 0x7E	; 126
    7224:	20 43       	sbci	r18, 0x30	; 48
    7226:	4f 4d       	sbci	r20, 0xDF	; 223
    7228:	4d 41       	sbci	r20, 0x1D	; 29
    722a:	4e 44       	sbci	r20, 0x4E	; 78
    722c:	3e 0a       	sbc	r3, r30
    722e:	00 5f       	subi	r16, 0xF0	; 240
    7230:	73 74       	andi	r23, 0x43	; 67
    7232:	61 72       	andi	r22, 0x21	; 33
    7234:	74 20       	and	r7, r4
    7236:	72 65       	ori	r23, 0x52	; 82
    7238:	61 63       	ori	r22, 0x31	; 49
    723a:	68 65       	ori	r22, 0x58	; 88
    723c:	64 0a       	sbc	r6, r20
    723e:	00 53       	subi	r16, 0x30	; 48
    7240:	50 3a       	cpi	r21, 0xA0	; 160
    7242:	20 00       	.word	0x0020	; ????
    7244:	42 6f       	ori	r20, 0xF2	; 242
    7246:	6f 74       	andi	r22, 0x4F	; 79
    7248:	20 63       	ori	r18, 0x30	; 48
    724a:	6f 75       	andi	r22, 0x5F	; 95
    724c:	6e 74       	andi	r22, 0x4E	; 78
    724e:	3a 20       	and	r3, r10
	...
